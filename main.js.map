{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/Assessment.ts","webpack:///./src/app/Choice.ts","webpack:///./src/app/Survey.ts","webpack:///./src/app/_services/message.service.ts","webpack:///./src/app/_services/survey.service.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/form/form.component.css","webpack:///./src/app/form/form.component.html","webpack:///./src/app/form/form.component.ts","webpack:///./src/app/sort/sort.component.css","webpack:///./src/app/sort/sort.component.html","webpack:///./src/app/sort/sort.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import {Choice} from './Choice';\n\n/**\n * Used to store the mosaiq assessments that have been received from drupal\n * Assessments are defined by their id, type, description, and an array of choices\n * This format has been defined within Drupal, so that once Survey has been converted into a JSON string\n * It can match the data in Drupal\n */\nexport class Assessment {\n    /**\n     * The ID of an assessment\n     * Used to identify with assessment ID stored in drupa\n     */\n    id: number;\n    /**\n     * Stores the assessment type\n     */\n    asessmentType: number;\n    /**\n     * Stores the description of an assessment\n     */\n    assessmentDesc: string;\n    /**\n     * Stores an array of choices\n     * These choices are the options of an assessment\n     */\n    choices: Choice[];\n\n    /**\n     * Constructor for Assessment Class\n     * @param id\n     * The Assessment ID\n     * @param assessmentType\n     * The Assessment Type\n     * @param assessmentDesc\n     * The description of an Assessment\n     */\n    constructor(id: number, assessmentType: number, assessmentDesc: string) {\n        this.id = id;\n        this.asessmentType = assessmentType;\n        this.assessmentDesc = assessmentDesc;\n        this.choices = new Array(); // Create an instance of an array\n    }\n\n    /**\n     * Pushes a new choice to the end of the choice array\n     * @param choice\n     * The Choice of an assessment\n     */\n    addChoice(choice: Choice): void {\n        this.choices.push(new Choice(\n            choice.id,\n            choice.choiceDesc\n        ));\n    }\n\n    /**\n     * Sets the Assessment's description\n     * @param description\n     * Description of the assessment\n     */\n    setAssessmentDescription(description: string): void {\n        this.assessmentDesc = description;\n    }\n}\n","/**\n * This class store the choices that have been imported from Drupal\n * This format has been defined within Drupal, so that once Survey has been converted into a JSON string\n * It can match the data in Drupal\n */\nexport class Choice {\n    /**\n     * The ID of a choice\n     * Used to uniquely identify the choice stored in Drupal\n     */\n    id: number;\n    /**\n     * The description of a choice\n     */\n    choiceDesc: string;\n\n    /**\n     * Constructor for Choice class\n     * @param id\n     * The ID of a choice\n     * @param choiceDesc\n     * The description of a choice\n     */\n    constructor(id: number, choiceDesc: string) {\n        this.id = id;\n        this.choiceDesc = choiceDesc;\n    }\n\n    /**\n     * This function sets a new choice description\n     * @param choiceDescription\n     * The description of a choice\n     */\n    public setChoiceDescription(choiceDescription: string): void {\n        this.choiceDesc = choiceDescription;\n    }\n\n}\n","import {Assessment} from './Assessment';\n\n/**\n * Contains all the assessments and choices that have been imported from Drupal\n * The format of this class has been defined in Drupal, so that it can easily be converted into a JSON string\n * And update the corresponding data in Drupal\n */\nexport class Survey {\n  /**\n   * The entity ID of the imported tab view\n   * Used to uniquely identify the data in Drupal\n   */\n  tabId: number;\n\n  /**A description of the imported tabview*/\n  tabDesc: string;\n\n  /**An array of all the assessments that are held within a tab view*/\n  assessments: Assessment [];\n\n  /**\n   * Constructor for Survey class\n   * @param tabId\n   * The entity ID of a tabview\n   * @param tabDesc\n   * The tabview description\n   */\n  constructor(tabId: number, tabDesc: string) {\n    this.tabId = tabId;\n    this.tabDesc = tabDesc;\n    this.assessments = new Array(); // Creates an instance of an array\n  }\n\n  /**\n   * Pushes an assessment into the assessment array\n   * @param assessment\n   * A tabview assessment\n   */\n  public addAssessment(assessment: Assessment) {\n    this.assessments.push(assessment);\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService {\n\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n  clear() {\n    this.messages = [];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {MessageService} from './message.service';\nimport {Observable, of} from 'rxjs';\nimport {catchError, tap} from 'rxjs/operators';\nimport {TabView} from '../TabView';\n\nconst httpOptions = {\n    headers: new HttpHeaders({'Content-Type': 'application/json'})\n};\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class SurveyService {\n  //\n  // private surveysURL = 'http://qadrupal.lan.sesahs.nsw.gov.au/tabview/edit';\n  // private drupalURL = 'http://qadrupal.lan.sesahs.nsw.gov.au/rest/tab/list?_format=json';\n  private tabViewURL = 'http://qadrupal.lan.sesahs.nsw.gov.au/rest/content/tab/get/';\n\n  // private tabViewURL = 'http://192.168.1.120/rest/content/tab/get/';\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService\n  ) { }\n\n  /**\n   * Returns tab view and the questions from the tab view\n   * @param ID\n   * GET request to druapl using the entityId associated with the tab view\n   */\n  getTabView(ID: number): Observable<TabView[]> {\n    const url = `${this.tabViewURL}${ID}/${'?_format=json'}`;\n    return this.http.get<TabView[]>(url)\n      .pipe(\n        tap(_ => this.log('fetched tabViews')),\n        catchError(this.handleError<TabView[]>('getTabViewList', []))\n      );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n  /** Log a SurveyService message with the MessageService */\n  private log(message: string) {\n    this.messageService.add(`SurveyService: ${message}`);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {RouterModule, Routes} from '@angular/router';\nimport {SortComponent} from './sort/sort.component';\n\nconst routes: Routes = [\n    { path: '', redirectTo: '/form/:id', pathMatch: 'full' },\n    { path: 'form/:id', component: SortComponent },\n];\n\n@NgModule({\n  imports: [\n      [ RouterModule.forRoot(routes)]\n  ],\n    exports: [ RouterModule ]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<body>\\n<router-outlet></router-outlet>\\n</body>\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'FormServer';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { FormComponent } from './form/form.component';\nimport { NgXformModule } from '@esss/ng-xform';\nimport { SortComponent } from './sort/sort.component';\nimport { AppRoutingModule } from './app-routing.module';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    FormComponent,\n    SortComponent\n  ],\n  imports: [\n    BrowserModule,\n    NgXformModule,\n    HttpClientModule,\n    AppRoutingModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"#wrapper {\\n    margin: auto;\\n    width: 50%;\\n    align-content: center;\\n}\\n#title {\\n    text-align: center ;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZm9ybS9mb3JtLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0lBQ1osVUFBVTtJQUNWLHFCQUFxQjtBQUN6QjtBQUNBO0lBQ0ksbUJBQW1CO0FBQ3ZCIiwiZmlsZSI6InNyYy9hcHAvZm9ybS9mb3JtLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIjd3JhcHBlciB7XG4gICAgbWFyZ2luOiBhdXRvO1xuICAgIHdpZHRoOiA1MCU7XG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xufVxuI3RpdGxlIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXIgO1xufVxuIl19 */\"","module.exports = \"<div id=\\\"wrapper\\\" *ngIf=\\\"survey\\\">\\n    <h2 id=\\\"title\\\">{{tabTitle}}</h2>\\n    <ng-xform [horizontalForm]=\\\"horizontal\\\" [labelWidth]=\\\"labelWidth\\\" [fields]=\\\"fields\\\" id=\\\"xform\\\"></ng-xform>\\n</div>\\n\\n\"","import {Component, Input, NgModule, OnDestroy, OnInit, TemplateRef, ViewChild} from '@angular/core';\nimport {AppComponent} from '../app.component';\nimport {\n    CheckboxField, CustomField, DateField, DateRangeField,\n    DynamicField,\n    MeasureField, MultilineField,\n    NestedFormGroup,\n    NgXformEditSaveComponent,\n    NgXformModule, NumberField, RadioGroupField,\n    SelectField,\n    TextField\n} from '@esss/ng-xform';\nimport {Observable, of, Subject, Subscription} from 'rxjs';\nimport {HttpClient} from '@angular/common/http';\nimport {Title} from '@angular/platform-browser';\nimport {Validators} from '@angular/forms';\nimport {TabView} from '../TabView';\nimport {ActivatedRoute, RouterModule} from '@angular/router';\nimport {Survey} from '../Survey';\nimport {SurveyService} from '../_services/survey.service';\nimport {Assessment} from '../Assessment';\nimport {Choice} from '../Choice';\nimport {delay} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css']\n})\n\n@NgModule({\n  declarations: [AppComponent] ,\n    imports: [NgXformModule, RouterModule],\n  bootstrap: [AppComponent]\n})\nexport class FormComponent implements OnInit, OnDestroy {\n\n  @ViewChild(NgXformEditSaveComponent) xformComponent: NgXformEditSaveComponent;\n  @ViewChild('customField') customFieldTmpl: TemplateRef<any>;\n\n    @Input() survey: Survey;\n    @Input() tabTitle: string;\n\n\n  public onchangefn = new Subject<string>();\n\n  public fields: DynamicField[];\n  public horizontal = false;\n  public labelWidth = 2;\n  public model: any;\n  public outputhelper = {A: 1, B: 2, C: 3};\n  public subscriptions: Subscription[] = [];\n\n  constructor(\n        private titleService: Title,\n        private http: HttpClient\n  )\n  {}\n\n  ngOnInit() {\n    const minDate = new Date();\n    const maxDate = new Date();\n\n    this.subscriptions.push(this.onchangefn.asObservable().subscribe(\n      (value: any) => this.xformComponent.setValue({outputopt: this.outputhelper[value]})\n    ));\n\n    minDate.setDate(minDate.getDate() - 3);\n    maxDate.setDate(maxDate.getDate() + 3);\n    this.titleService.setTitle(this.tabTitle);\n\n    this.initField();\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  /**\n   * This function is used to init the fields array.\n   * The fields will be used to display the different type of questions\n   */\n  public initField(): void {\n\n      this.fields = [\n          new TextField({\n              key: 'first_name',\n              label: 'First Name',\n          }),\n          new TextField({\n              key: 'last_name',\n              label: 'Last Name',\n          }),\n          new TextField({\n              key: 'mrn',\n              label: 'Medical Record Number (MRN)',\n          })\n      ];\n\n      let i = 0;\n      for (i; i < this.survey.assessments.length; i++) {\n          if (this.survey.assessments[i].asessmentType.toString() === '5') {\n              this.createRadioGroup(i);\n              this.createSelect(i);\n          } else {\n              this.createText(i);\n          }\n      }\n  }\n\n    /**\n     * This funtion is used to create a SelectField\n     * @param i Is used to determine which assessment has been inputed\n     */\n    public createSelect(i: number) {\n\n        // Push new select into the fields array\n        const tempField = new SelectField({\n            key: this.survey.assessments[i].id.toString(),\n            label: this.survey.assessments[i].assessmentDesc,\n            searchable: true,\n            options: this.survey.assessments[i].choices,\n            addNewOption: true,\n            addNewOptionText: 'id',\n            optionLabelKey: 'choiceDesc',\n            validators: [\n                Validators.required,\n                Validators.minLength(1)\n            ]\n        });\n\n        // Push\n        this.fields.push(tempField);\n    }\n\n    /**\n     * This funtion is used to create a SelectField\n     * @param i Is used to determine which assessment has been inputed\n     */\n    public createSelectMany(i: number) {\n\n        // Push new select into the fields array\n        const tempField = new SelectField({\n            key: this.survey.assessments[i].id.toString(),\n            label: this.survey.assessments[i].assessmentDesc,\n            searchable: true,\n            options: this.survey.assessments[i].choices,\n            addNewOption: true,\n            addNewOptionText: 'id',\n            optionLabelKey: 'choiceDesc',\n            multiple: true,\n            validators: [\n                Validators.required,\n                Validators.minLength(1)\n            ]\n        });\n\n        // Push\n        this.fields.push(tempField);\n    }\n\n    /**\n     * This funtion is used to create a RadioGroup\n     * @param i Is used to determine which assessment has been inputed\n     */\n    public createRadioGroup(i: number) {\n\n        // Push new radio group into the fields array\n        const tempField = new RadioGroupField({\n            key: this.survey.assessments[i].id.toString(),\n            label: this.survey.assessments[i].assessmentDesc,\n            options: of(this.survey.assessments[i].choices).pipe(delay(10)),\n            optionValueKey: 'id',\n            optionLabelKey: 'choiceDesc',\n            validators: [\n                Validators.required\n            ]\n        });\n\n        // Push\n        this.fields.push(tempField);\n    }\n\n    /**\n     * Used to create a TextField\n     * @param i Is used to determine which assessment has been inputed\n     */\n    public createText(i: number) {\n\n        // Push new text field into the fields array\n        const tempField = new TextField({\n            key: this.survey.assessments[i].id,\n            label: this.survey.assessments[i].assessmentDesc,\n            validators: [\n                Validators.required,\n                Validators.minLength(1)\n            ]\n        });\n\n        // Push\n        this.fields.push(tempField);\n\n    }\n\n    /**\n     * Used to create a NumberField\n     * @param i Is used to determine which assessment has been inputed\n     */\n    public createNumber(i: number): void {\n\n        // Push new number field into the fields array\n        const tempField = new NumberField({\n            key: this.survey.assessments[i].id,\n            label: this.survey.assessments[i].assessmentDesc + ' (Number)',\n            validators: [\n                Validators.required,\n                Validators.minLength(1)\n            ]\n        });\n\n        // Push\n        this.fields.push(tempField);\n\n    }\n\n    /**\n     * Used to create a TextField\n     * @param i Is used to determine which assessment has been inputed\n     */\n    public createCheckBox(i: number) {\n\n        // Push new text field into the fields array\n        const tempField = new CheckboxField({\n            key: this.survey.assessments[i].id,\n            label: this.survey.assessments[i].assessmentDesc,\n        });\n\n        // Push\n        this.fields.push(tempField);\n    }\n\n  public onSubmit(values: object) {\n    this.model = values;\n    console.log(this.model);\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NvcnQvc29ydC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div id=\\\"survey\\\" *ngIf=\\\"survey\\\">\\n    <app-form [survey]=\\\"survey\\\" [tabTitle]=\\\"tabTitle\\\"></app-form>\\n</div>\\n\\n\"","import {Component, OnInit, Provider} from '@angular/core';\nimport {TabView} from '../TabView';\nimport {Survey} from '../Survey';\nimport {Assessment} from '../Assessment';\nimport {Choice} from '../Choice';\nimport {HttpClient} from '@angular/common/http';\n// import {ActivatedRoute} from '@angular/router';\nimport {SurveyService} from '../_services/survey.service';\nimport {ActivatedRoute} from '@angular/router';\n\n@Component({\n  selector: 'app-sort',\n  templateUrl: './sort.component.html',\n  styleUrls: ['./sort.component.css'],\n})\nexport class SortComponent implements OnInit {\n\n    /**\n     * The id from the URL is linked to the entity ID of the tabview\n     */\n    private id = +this.route.snapshot.paramMap.get('id');\n    /**\n     * Stores an array of TabViews that have been imported from Drupal\n     */\n    private tabViews: TabView [];\n    /**\n     * An instance of a Survey\n     */\n    private survey: Survey;\n\n    private tabTitle: string;\n\n  constructor(\n      private http: HttpClient,\n      private route: ActivatedRoute,\n      private formService: SurveyService\n  ) { }\n\n  ngOnInit() {\n      this.getTabView();\n  }\n\n    /**\n     * GET tab views\n     * Async task that uses the service class to interface with Drupal\n     * Retrieved data from drupal is then stored into an array of TabViews\n     * Once completed, the TabViews are then sorted into the Survey Class\n     */\n    public getTabView() {\n        this.formService.getTabView(this.id)\n            .subscribe(\n                data => this.tabViews = data, // Move data into TabView\n                err => console.log(err), // Log any Errors\n                () => this.sortSurvey()); // Sort tabviews into a Survey\n    }\n\n    /**\n     * Sorts out the tabviews that were retrieved from Drupal\n     * Creates assessments and their choices by iterating through the tabviews\n     * Once an assessment is created and it's choices have been populated\n     * Then it is added into the Survey\n     */\n    public sortSurvey(): void {\n        this.createSurvey(); // init survey\n\n        let tempAssessment: Assessment; // Create a temporary\n        let i = 0; // Iterates through the tab view\n        let j = 0; // Iterates through the assessment choices\n\n        this.tabTitle = this.tabViews[0].tabViewLabel;\n\n        for (i; i < this.tabViews.length; i++) {\n            tempAssessment = this.createAssessment(i); // Create a new assessment\n            if (this.tabViews[i].assessmentType.toString() === '4') {\n                tempAssessment.addChoice(this.createChoice(i, 4)); // Add a single choice to an assessment\n            } else if (this.tabViews[i].assessmentType.toString() === '5') {\n                j = i; // index of the choice\n                while (this.tabViews[j].assessmentId === this.tabViews[i].assessmentId) {\n                    tempAssessment.addChoice(this.createChoice(j, 5)); // Add a single a choice to an assessment\n                    j++;\n                }\n                i = j; // Update new position of i\n            }\n            console.log(tempAssessment);\n            this.survey.addAssessment(tempAssessment); // Add the assessment to the survey\n        }\n    }\n\n    /**\n     * Creates a new choice based on the assessment type\n     * @param i\n     * Index of the array\n     * @type\n     * The assessment type\n     */\n    public createChoice(i: number, type: number): Choice {\n        let tempChoices: Choice; // Create temp choice\n        /** Creates a default choice*/\n        if (type === 4) {\n            tempChoices = new Choice(\n                4,\n                'Type 4'\n            );\n            return tempChoices;\n        } else {\n            /** Creates a normal choice*/\n            tempChoices = new Choice(\n                this.tabViews[i].choiceId,\n                this.tabViews[i].choiceLabel\n            );\n        }\n        return tempChoices;\n    }\n\n    /**\n     * Creates a new survey\n     */\n    public createSurvey(): void {\n        this.survey = new Survey(\n            this.tabViews[0].tabViewId,\n            this.tabViews[0].tabViewLabel\n        );\n    }\n    /**\n     * Init temp assessment\n     * @param i\n     * Index of the array\n     */\n    public createAssessment(i: number): Assessment {\n        const tempAssessment = new Assessment(\n            this.tabViews[i].assessmentId,\n            this.tabViews[i].assessmentType,\n            this.tabViews[i].assessmentLabel.trim()\n        );\n        return tempAssessment;\n    }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}